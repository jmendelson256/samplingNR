[{"path":"https://jmendelson256.github.io/samplingNR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jonathan Mendelson. Author, maintainer.","code":""},{"path":"https://jmendelson256.github.io/samplingNR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Mendelson J (2023). samplingNR: Stratified sample allocation anticipated nonresponse. https://github.com/jmendelson256/samplingNR, https://jmendelson256.github.io/samplingNR/.","code":"@Manual{,   title = {samplingNR: Stratified sample allocation under anticipated nonresponse},   author = {Jonathan Mendelson},   year = {2023},   note = {https://github.com/jmendelson256/samplingNR, https://jmendelson256.github.io/samplingNR/}, }"},{"path":"https://jmendelson256.github.io/samplingNR/index.html","id":"samplingnr","dir":"","previous_headings":"","what":"Stratified sample allocation under anticipated nonresponse","title":"Stratified sample allocation under anticipated nonresponse","text":"samplingNR R package allows computing optimal allocations anticipated nonresponse. still development.","code":""},{"path":"https://jmendelson256.github.io/samplingNR/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Stratified sample allocation under anticipated nonresponse","text":"can install development version samplingNR GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"jmendelson256/samplingNR\")"},{"path":"https://jmendelson256.github.io/samplingNR/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Stratified sample allocation under anticipated nonresponse","text":"Placeholder – add example . ’ll still need render README.Rmd regularly, keep README.md --date. devtools::build_readme() handy . also use GitHub Actions re-render README.Rmd every time push. example workflow can found : https://github.com/r-lib/actions/tree/v1/examples.","code":"library(samplingNR) ## basic example code"},{"path":"https://jmendelson256.github.io/samplingNR/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 samplingNR authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://jmendelson256.github.io/samplingNR/reference/calc_moments_truncbinom.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute moments for truncated binomial distribution — calc_moments_truncbinom","title":"Compute moments for truncated binomial distribution — calc_moments_truncbinom","text":"random variable \\(X \\sim TBinom(n,p)\\), follows (zero)-truncated binomial distribution defined dtruncbinom (.e., binomial distribution support zero removed), computes \\(\\textrm{E}(X)\\), \\(\\textrm{E}(X^2)\\), \\(\\textrm{Var}(X)\\), \\(\\textrm{E}(1/x)\\).","code":""},{"path":"https://jmendelson256.github.io/samplingNR/reference/calc_moments_truncbinom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute moments for truncated binomial distribution — calc_moments_truncbinom","text":"","code":"calc_moments_truncbinom(size, prob)"},{"path":"https://jmendelson256.github.io/samplingNR/reference/calc_moments_truncbinom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute moments for truncated binomial distribution — calc_moments_truncbinom","text":"size scalar number trials (1 ) prob scalar probability success trial (nonzero)","code":""},{"path":"https://jmendelson256.github.io/samplingNR/reference/calc_moments_truncbinom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute moments for truncated binomial distribution — calc_moments_truncbinom","text":"vector containing \\(\\textrm{E}(X)\\), \\(\\textrm{E}(X^2)\\), \\(\\textrm{Var}(X)\\), \\(\\textrm{E}(1/x)\\)","code":""},{"path":"https://jmendelson256.github.io/samplingNR/reference/calc_moments_truncbinom.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute moments for truncated binomial distribution — calc_moments_truncbinom","text":"Moments computed directly using probability mass function since simple closed form \\(textrm{E}(1/x)\\). may lead slow computation extremely large numbers trials.","code":""},{"path":[]},{"path":"https://jmendelson256.github.io/samplingNR/reference/calc_moments_truncbinom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute moments for truncated binomial distribution — calc_moments_truncbinom","text":"","code":"calc_moments_truncbinom(30, .1) #>          E_X       E_X_sq          V_X E_one_over_X  #>     3.132803    12.217932     2.403477     0.428114  calc_moments_truncbinom(30, .2) #>          E_X       E_X_sq          V_X E_one_over_X  #>    6.0074368   40.8505706    4.7612731    0.1991115"},{"path":"https://jmendelson256.github.io/samplingNR/reference/calc_zeta_discrete.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute zeta, as defined in paper, for integer number of respondents — calc_zeta_discrete","title":"Compute zeta, as defined in paper, for integer number of respondents — calc_zeta_discrete","text":"calc_zeta_discrete essentially computes \\(\\zeta_h(n_h, \\bar{\\phi}_h):=\\mathrm{E}(r_h)\\mathrm{E}\\left(\\frac{1}{r_h}\\right)\\), defined paper, integer \\(n_h\\). strata \\(\\mathrm{E}(r_h)<3.5\\), evaluate \\(\\zeta_h(.)\\) using \\(n_h':= max\\left(n_h, \\left\\lceil \\frac{r_h^{LB}}{\\bar{\\phi}_h}\\right\\rceil\\right)\\) place \\(n_h\\). Continuous values \\(n_h\\) rounded (default).","code":""},{"path":"https://jmendelson256.github.io/samplingNR/reference/calc_zeta_discrete.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute zeta, as defined in paper, for integer number of respondents — calc_zeta_discrete","text":"","code":"calc_zeta_discrete(   n_h,   phibar_h,   rh_min = 3.5,   round_flag = TRUE,   verbose_flag = FALSE )"},{"path":"https://jmendelson256.github.io/samplingNR/reference/calc_zeta_discrete.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute zeta, as defined in paper, for integer number of respondents — calc_zeta_discrete","text":"n_h (vector) strata sample sizes (nonresponse) phibar_h (vector) strata response propensities rh_min (scalar) minimum target respondents per stratum (default 3.5) round_flag (bool) specifies whether round continuous allocations (versus throwing error) verbose_flag (bool) flag whether provide detailed results","code":""},{"path":"https://jmendelson256.github.io/samplingNR/reference/calc_zeta_discrete.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute zeta, as defined in paper, for integer number of respondents — calc_zeta_discrete","text":"vector length \\(H\\) containing \\(\\left\\{\\zeta_h(n_h', \\bar{\\phi}_h):h=1,2,...,H\\right\\}\\), \\(n_h'\\) larger \\(n_h\\) \\(\\frac{r_h^{LB}}{\\bar{\\phi}_h}\\).","code":""},{"path":"https://jmendelson256.github.io/samplingNR/reference/calc_zeta_discrete.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute zeta, as defined in paper, for integer number of respondents — calc_zeta_discrete","text":"paper, assumed number respondents stratum \\(h\\) can modeled standard binomial support zero removed (.e., zero-truncated binomial; see dtruncbinom), written \\(r_h \\sim TBinom(n_h, \\bar{\\phi}_h)\\), \\(n_h\\) number invitees stratum \\(h\\), \\(\\bar{\\phi}_h\\) average response propensity within stratum \\(h\\), unit-level response propensities assumed constant within strata. paper defines function \\(\\zeta_h(n_h, \\bar{\\phi}_h):=\\mathrm{E}(r_h)\\mathrm{E}\\left(\\frac{1}{r_h}\\right)\\); quantity variance inflation term captures effect variability number respondents given allocation. current function (calc_zeta_discrete) computes \\(\\zeta_h(n_h', \\bar{\\phi}_h)\\), use \\(n_h':= max\\left(n_h, \\left\\lceil \\frac{r_h^{LB}}{\\bar{\\phi}_h}\\right\\rceil\\right)\\) avoid underallocating strata expected respondents, , \\(r_h^{LB}\\) given lower bound number expected respondents. default, set \\(r_h^{LB} = 3.5\\), since truncated binomial distribution may sometimes poor approximation binomial distribution levels, observed numerically \\(\\zeta_h(n_h, \\bar{\\phi}_h)\\) roughly maximized various \\(\\bar{\\phi}_h\\) (fixed levels .01 1) \\(n_h \\approx \\frac{3.5}{\\bar{\\phi}_h}\\). Function defined discrete \\(n_h\\); input round_flag controls whether \\(n_h\\) rounded nearest integer (opposed throwing error).","code":""},{"path":"https://jmendelson256.github.io/samplingNR/reference/calc_zeta_discrete.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute zeta, as defined in paper, for integer number of respondents — calc_zeta_discrete","text":"","code":"#Basic example calc_zeta_discrete(n_h = c(100, 200, 300, 300),                                   phibar_h = c(.03, .02, .05, .001)) #> Error in calc_zeta_discrete(n_h = c(100, 200, 300, 300), phibar_h = c(0.03,     0.02, 0.05, 0.001)): could not find function \"calc_zeta_discrete\"  #Verbose info shows that strata 1,5 have their sample sizes increased #   due to having fewer than 3.5 expected respondents calc_zeta_discrete(n_h = c(100, 200, 300, 300),                                   phibar_h = c(.03, .02, .05, .001),                                   verbose_flag = TRUE) #> Error in calc_zeta_discrete(n_h = c(100, 200, 300, 300), phibar_h = c(0.03,     0.02, 0.05, 0.001), verbose_flag = TRUE): could not find function \"calc_zeta_discrete\"  #Similar to above, but removes the minimum number of respondents, # which changes the values for strata 1 and 4. calc_zeta_discrete(n_h = c(100, 200, 300, 300),                                   phibar_h = c(.03, .02, .05, .001),                                   rh_min = 0,                                   verbose_flag = TRUE) #> Error in calc_zeta_discrete(n_h = c(100, 200, 300, 300), phibar_h = c(0.03,     0.02, 0.05, 0.001), rh_min = 0, verbose_flag = TRUE): could not find function \"calc_zeta_discrete\""},{"path":"https://jmendelson256.github.io/samplingNR/reference/dtruncbinom.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate density of truncated binomial distribution — dtruncbinom","title":"Calculate density of truncated binomial distribution — dtruncbinom","text":"Calculates density binomial distribution support 0 removed, refer (zero-) truncated binomial distribution (e.g., Rider, 1955; Stephan, 1945).","code":""},{"path":"https://jmendelson256.github.io/samplingNR/reference/dtruncbinom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate density of truncated binomial distribution — dtruncbinom","text":"","code":"dtruncbinom(x, size, prob)"},{"path":"https://jmendelson256.github.io/samplingNR/reference/dtruncbinom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate density of truncated binomial distribution — dtruncbinom","text":"x vector values size (scalar) number trials (1 ) prob (scalar) probability success trial (nonzero)","code":""},{"path":"https://jmendelson256.github.io/samplingNR/reference/dtruncbinom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate density of truncated binomial distribution — dtruncbinom","text":"Vector densities associated provided values (x) given parameters","code":""},{"path":"https://jmendelson256.github.io/samplingNR/reference/dtruncbinom.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate density of truncated binomial distribution — dtruncbinom","text":"Let \\(X\\) denote random variable probability mass function (pmf) \\(\\mathrm{p}(k;n,p) = \\mathrm{Pr}(X = k; n, p) = \\frac{\\binom{n}{k} p^k (1-p)^{n-k}}{1 - (1-p)^n} \\propto \\binom{n}{k} p^k (1-p)^{n-k}\\) \\(k = 1, 2, ..., n\\), zero mass, otherwise. say \\(X\\) truncated binomial parameters \\((n,p)\\),  written \\(X \\sim TBinom(n,p)\\),  \\(n\\) refers number trials  \\(p\\) refers probability success trial  corresponding binomial distribution.","code":""},{"path":"https://jmendelson256.github.io/samplingNR/reference/dtruncbinom.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate density of truncated binomial distribution — dtruncbinom","text":"Rider, P. R. (1955). Truncated binomial negative binomial distributions. Journal American Statistical Association, 50(271), 877-883. Stephan, F. F. (1945). expected value variance reciprocal negative powers positive Bernoullian variate. Annals Mathematical Statistics, 16(1), 50-61.","code":""},{"path":[]},{"path":"https://jmendelson256.github.io/samplingNR/reference/dtruncbinom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate density of truncated binomial distribution — dtruncbinom","text":"","code":"dtruncbinom(1:20, 20, .2) #>  [1] 5.831844e-02 1.385063e-01 2.077594e-01 2.207444e-01 1.765955e-01 #>  [6] 1.103722e-01 5.518610e-02 2.241935e-02 7.473118e-03 2.055107e-03 #> [11] 4.670699e-04 8.757560e-05 1.347317e-05 1.684146e-06 1.684146e-07 #> [16] 1.315739e-08 7.739642e-10 3.224851e-11 8.486450e-13 1.060806e-14  #same as above dbinom(1:20, size = 20, prob = .2) / sum(dbinom(1:20, size = 20, prob = .2)) #>  [1] 5.831844e-02 1.385063e-01 2.077594e-01 2.207444e-01 1.765955e-01 #>  [6] 1.103722e-01 5.518610e-02 2.241935e-02 7.473118e-03 2.055107e-03 #> [11] 4.670699e-04 8.757560e-05 1.347317e-05 1.684146e-06 1.684146e-07 #> [16] 1.315739e-08 7.739642e-10 3.224851e-11 8.486450e-13 1.060806e-14"},{"path":"https://jmendelson256.github.io/samplingNR/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://jmendelson256.github.io/samplingNR/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://jmendelson256.github.io/samplingNR/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://jmendelson256.github.io/samplingNR/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling `rhs(lhs)`.","code":""},{"path":"https://jmendelson256.github.io/samplingNR/reference/samplingNR.html","id":null,"dir":"Reference","previous_headings":"","what":"samplingNR: A package for stratified sample allocation under anticipated nonresponse — samplingNR","title":"samplingNR: A package for stratified sample allocation under anticipated nonresponse — samplingNR","text":"Package contains functions used computing stratified sample allocations manner accounts anticipated effects nonresponse sample efficiency.","code":""},{"path":[]},{"path":"https://jmendelson256.github.io/samplingNR/reference/samplingNR.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"samplingNR: A package for stratified sample allocation under anticipated nonresponse — samplingNR","text":"Maintainer: Jonathan Mendelson jmendelson@gmail.com","code":""},{"path":"https://jmendelson256.github.io/samplingNR/news/index.html","id":"samplingnr-010-development-version","dir":"Changelog","previous_headings":"","what":"samplingNR 0.1.0 (development version)","title":"samplingNR 0.1.0 (development version)","text":"Added fn calc zeta Added truncated binomial functions, including testthat info Added NEWS.md file track changes package.","code":""}]
