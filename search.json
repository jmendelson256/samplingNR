[{"path":[]},{"path":"https://jmendelson256.github.io/samplingNR/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"CC0 1.0 Universal","title":"CC0 1.0 Universal","text":"CREATIVE COMMONS CORPORATION LAW FIRM PROVIDE LEGAL SERVICES. DISTRIBUTION DOCUMENT CREATE ATTORNEY-CLIENT RELATIONSHIP. CREATIVE COMMONS PROVIDES INFORMATION “-” BASIS. CREATIVE COMMONS MAKES WARRANTIES REGARDING USE DOCUMENT INFORMATION WORKS PROVIDED HEREUNDER, DISCLAIMS LIABILITY DAMAGES RESULTING USE DOCUMENT INFORMATION WORKS PROVIDED HEREUNDER.","code":""},{"path":"https://jmendelson256.github.io/samplingNR/LICENSE.html","id":"statement-of-purpose","dir":"","previous_headings":"","what":"Statement of Purpose","title":"CC0 1.0 Universal","text":"laws jurisdictions throughout world automatically confer exclusive Copyright Related Rights (defined ) upon creator subsequent owner(s) (, “owner”) original work authorship /database (, “Work”). Certain owners wish permanently relinquish rights Work purpose contributing commons creative, cultural scientific works (“Commons”) public can reliably without fear later claims infringement build upon, modify, incorporate works, reuse redistribute freely possible form whatsoever purposes, including without limitation commercial purposes. owners may contribute Commons promote ideal free culture production creative, cultural scientific works, gain reputation greater distribution Work part use efforts others. /purposes motivations, without expectation additional consideration compensation, person associating CC0 Work (“Affirmer”), extent owner Copyright Related Rights Work, voluntarily elects apply CC0 Work publicly distribute Work terms, knowledge Copyright Related Rights Work meaning intended legal effect CC0 rights. Copyright Related Rights. Work made available CC0 may protected copyright related neighboring rights (“Copyright Related Rights”). Copyright Related Rights include, limited , following: right reproduce, adapt, distribute, perform, display, communicate, translate Work; moral rights retained original author(s) /performer(s); publicity privacy rights pertaining person’s image likeness depicted Work; rights protecting unfair competition regards Work, subject limitations paragraph 4(), ; rights protecting extraction, dissemination, use reuse data Work; database rights (arising Directive 96/9/EC European Parliament Council 11 March 1996 legal protection databases, national implementation thereof, including amended successor version directive); similar, equivalent corresponding rights throughout world based applicable law treaty, national implementations thereof. Waiver. greatest extent permitted , contravention , applicable law, Affirmer hereby overtly, fully, permanently, irrevocably unconditionally waives, abandons, surrenders Affirmer’s Copyright Related Rights associated claims causes action, whether now known unknown (including existing well future claims causes action), Work () territories worldwide, (ii) maximum duration provided applicable law treaty (including future time extensions), (iii) current future medium number copies, (iv) purpose whatsoever, including without limitation commercial, advertising promotional purposes (“Waiver”). Affirmer makes Waiver benefit member public large detriment Affirmer’s heirs successors, fully intending Waiver shall subject revocation, rescission, cancellation, termination, legal equitable action disrupt quiet enjoyment Work public contemplated Affirmer’s express Statement Purpose. Public License Fallback. part Waiver reason judged legally invalid ineffective applicable law, Waiver shall preserved maximum extent permitted taking account Affirmer’s express Statement Purpose. addition, extent Waiver judged Affirmer hereby grants affected person royalty-free, non transferable, non sublicensable, non exclusive, irrevocable unconditional license exercise Affirmer’s Copyright Related Rights Work () territories worldwide, (ii) maximum duration provided applicable law treaty (including future time extensions), (iii) current future medium number copies, (iv) purpose whatsoever, including without limitation commercial, advertising promotional purposes (“License”). License shall deemed effective date CC0 applied Affirmer Work. part License reason judged legally invalid ineffective applicable law, partial invalidity ineffectiveness shall invalidate remainder License, case Affirmer hereby affirms () exercise remaining Copyright Related Rights Work (ii) assert associated claims causes action respect Work, either case contrary Affirmer’s express Statement Purpose. Limitations Disclaimers. trademark patent rights held Affirmer waived, abandoned, surrendered, licensed otherwise affected document. Affirmer offers Work -makes representations warranties kind concerning Work, express, implied, statutory otherwise, including without limitation warranties title, merchantability, fitness particular purpose, non infringement, absence latent defects, accuracy, present absence errors, whether discoverable, greatest extent permissible applicable law. Affirmer disclaims responsibility clearing rights persons may apply Work use thereof, including without limitation person’s Copyright Related Rights Work. , Affirmer disclaims responsibility obtaining necessary consents, permissions rights required use Work. Affirmer understands acknowledges Creative Commons party document duty obligation respect CC0 use Work.","code":""},{"path":"https://jmendelson256.github.io/samplingNR/articles/samplingNR.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Sample allocation example: 2016 PEVS-ADM","text":"example shows use samplingNR package allocate sample 50,000 invitees, using methods described paper assuming equivalent strata variances across strata (.e., \\(S_h = S\\) constant \\(S\\)). example shows replicate paper’s Table 2, compares proposed allocation common alternatives application survey military personnel. stratification, population counts, response rate information used example included package data set pevs_adm_2016_rrs, structured tibble. data based secondary analysis public use data 2016 Post-Election Voting Survey Active Duty Military (PEVS-ADM; Federal Assistance Voting Program, 2017a, 2017b), described paper.","code":""},{"path":[]},{"path":"https://jmendelson256.github.io/samplingNR/articles/samplingNR.html","id":"exact-optimal-allocation-iterative","dir":"Articles","previous_headings":"Compute allocations","what":"Exact optimal allocation (iterative)","title":"Sample allocation example: 2016 PEVS-ADM","text":"function opt_nh_nonresp() calculates exact (.e., iteratively computed) version optimal allocation nonresponse, provided paper summarized function documentation. assume stratification follows pevs_adm_2016_rrs, specify strata population sizes N_h anticipated response propensities phibar_h. omitted optional argument S_h, leading use default assumption \\(S_h\\) constant across strata. Note fixing total number invitees (n_max), implicitly assuming use constant cost per invitee scenario paper (.e., per unit costs assumed constant across strata vary response status).","code":"library(samplingNR) library(magrittr) library(dplyr)  #Compute exact optimum allocation for PEVS-ADM 2016 data set for n = 50k #Assumes tau = 1 by default pevs_optE_alloc_50k <- opt_nh_nonresp(N_h = pevs_adm_2016_rrs$Nhat_h,                                       phibar_h = pevs_adm_2016_rrs$rr_h,                                       n_max = 50000)  #Merge results into original data frame pevs_adm_alloc_50k_merged <- pevs_adm_2016_rrs %>%   dplyr::mutate(n_h_optE = c(pevs_optE_alloc_50k),                 zeta_h_optE = attr(pevs_optE_alloc_50k,\"zeta_h_prev\"))  #View results pevs_adm_alloc_50k_merged #> # A tibble: 91 × 10 #>    h     service paygrade age   region  sex   Nhat_h   rr_h n_h_optE zeta_h_optE #>    <chr> <fct>   <fct>    <fct> <fct>   <fct>  <dbl>  <dbl>    <dbl>       <dbl> #>  1 1     Army    E1-E5    18-24 US      M     1.09e5 0.0189    8267.        1.01 #>  2 2     Army    E1-E5    18-24 US      F     1.89e4 0.0364    1041.        1.03 #>  3 3     Army    E1-E5    18-24 Overse… M     1.85e4 0.0214    1333.        1.04 #>  4 4     Army    E1-E5    18-24 Overse… F     3.31e3 0.0431     179.        1.17 #>  5 5     Army    E1-E5    25-29 US      M     4.83e4 0.0487    2280.        1.01 #>  6 6     Army    E1-E5    25-29 US      F     8.68e3 0.0619     370.        1.05 #>  7 7     Army    E1-E5    25-29 Overse… M/F   1.08e4 0.0566     477.        1.04 #>  8 8     Army    E1-E5    30-34 US      M/F   2.14e4 0.0891     746.        1.01 #>  9 9     Army    E1-E5    30-34 Overse… M/F   3.74e3 0.0904     135.        1.09 #> 10 10    Army    E1-E5    35+   US      M/F   9.06e3 0.188      219.        1.02 #> # ℹ 81 more rows"},{"path":"https://jmendelson256.github.io/samplingNR/articles/samplingNR.html","id":"approximately-optimal-allocation","dir":"Articles","previous_headings":"Compute allocations","what":"Approximately optimal allocation","title":"Sample allocation example: 2016 PEVS-ADM","text":"approximate version allocation, assumes \\(\\zeta_h(n_h,\\bar{\\phi}_h) = 1\\), can computed using function opt_nh_nonresp_oneiter().","code":"pevs_optA_alloc_50k <- opt_nh_nonresp_oneiter(N_h = pevs_adm_2016_rrs$Nhat_h,                                               phibar_h = pevs_adm_2016_rrs$rr_h,                                               n_max = 50000)"},{"path":"https://jmendelson256.github.io/samplingNR/articles/samplingNR.html","id":"neyman-style-allocations-for-comparison","dir":"Articles","previous_headings":"Compute allocations","what":"Neyman-style allocations for comparison","title":"Sample allocation example: 2016 PEVS-ADM","text":"comparison, also compute Neyman allocation invitees (\\(n_h^{\\textrm{Ninv}}\\propto N_h S_h\\)), adjust differential nonresponse, Neyman allocation expected respondents (\\(n_h^{\\textrm{Nresp}}\\propto N_h S_h / \\bar{\\phi}_h\\)), adjusts inverse anticipated response rates. case, ignore \\(S_h\\) terms applications equations, purposes example, given earlier assumption equivalent strata variances.","code":"nh_Ninv_propto <- pevs_adm_2016_rrs$Nhat_h nh_Ninv <- nh_Ninv_propto / sum(nh_Ninv_propto) * 50000  nh_Nresp_propto <- pevs_adm_2016_rrs$Nhat_h / pevs_adm_2016_rrs$rr_h nh_Nresp <- nh_Nresp_propto / sum(nh_Nresp_propto) * 50000  #Make sure allocations are valid all(nh_Ninv >= 2 & nh_Ninv <= pevs_adm_2016_rrs$Nhat_h) #> [1] TRUE all(nh_Nresp >= 2 & nh_Nresp <= pevs_adm_2016_rrs$Nhat_h) #> [1] TRUE"},{"path":"https://jmendelson256.github.io/samplingNR/articles/samplingNR.html","id":"view-allocations","dir":"Articles","previous_headings":"","what":"View allocations","title":"Sample allocation example: 2016 PEVS-ADM","text":"resulting allocations can seen match shown paper’s Appendix.","code":"(pevs_adm_allocs_50k <-    pevs_adm_alloc_50k_merged %>%   mutate(n_h_optA = pevs_optA_alloc_50k,          n_h_Ninv = nh_Ninv,          n_h_Nresp = nh_Nresp) %>%   select(c(\"h\", \"n_h_Ninv\", \"n_h_Nresp\", \"n_h_optA\", \"n_h_optE\", \"zeta_h_optE\"))) #> # A tibble: 91 × 6 #>    h     n_h_Ninv n_h_Nresp n_h_optA n_h_optE zeta_h_optE #>    <chr>    <dbl>     <dbl>    <dbl>    <dbl>       <dbl> #>  1 1        4269.   12975.     8309.    8267.        1.01 #>  2 2         740.    1164.     1036.    1041.        1.03 #>  3 3         722.    1935.     1320.    1333.        1.04 #>  4 4         129.     172.      167.     179.        1.17 #>  5 5        1890.    2225.     2289.    2280.        1.01 #>  6 6         339.     314.      364.     370.        1.05 #>  7 7         421.     426.      473.     477.        1.04 #>  8 8         835.     537.      747.     746.        1.01 #>  9 9         146.      92.6     130.     135.        1.09 #> 10 10        354.     108.      218.     219.        1.02 #> # ℹ 81 more rows"},{"path":"https://jmendelson256.github.io/samplingNR/articles/samplingNR.html","id":"evaluate-performance","dir":"Articles","previous_headings":"","what":"Evaluate performance","title":"Sample allocation example: 2016 PEVS-ADM","text":", can roughly examine performance computing number respondents, design effect weighting (\\(deff_w\\); Kish, 1992), effective number respondents allocation, replicating Table 2 paper. results show given assumptions, proposed allocation effective sample size 25% higher Neyman-style allocations.","code":""},{"path":"https://jmendelson256.github.io/samplingNR/articles/samplingNR.html","id":"code","dir":"Articles","previous_headings":"Evaluate performance","what":"Code","title":"Sample allocation example: 2016 PEVS-ADM","text":"","code":"#Calculate Kish's deff_w for poststratified estimator under nonresponse calculate_deff_w <- function (N_h, r_h) {   stopifnot(length(N_h) == length(r_h))   stopifnot(all(r_h >= 1))   stopifnot(all(r_h <= N_h))   testthat::expect_equal(all(r_h <= N_h), TRUE)    w_h <- N_h/r_h    wbar <- sum(w_h * r_h)/sum(r_h)   deff_w <- 1 + 1/sum(r_h) * sum((w_h - wbar)^2 * r_h)/wbar^2    (deff_w) }  #Summarize results from allocation under assumption that r_h = n_h * phibar_h summarize_alloc <- function(N_h, phibar_h, n_h) {   n_total <- sum(n_h)   r_total <- sum(phibar_h * n_h)   rr <- r_total / n_total   deff_w <- calculate_deff_w(N_h = N_h, r_h = n_h * phibar_h)   eff_resp <- r_total / deff_w   c(n_total, r_total, rr, deff_w, eff_resp) }  #Summarize results of each allocation pevs_adm_alloc_summary_list <-   lapply(2:5,          function(col) summarize_alloc(N_h = pevs_adm_2016_rrs$Nhat_h,                                        phibar_h = pevs_adm_2016_rrs$rr_h,                                        n_h = unname(unlist(pevs_adm_allocs_50k[,col]))))  names(pevs_adm_alloc_summary_list) <- names(pevs_adm_allocs_50k[,2:5])  pevs_adm_alloc_summary_table <- pevs_adm_alloc_summary_list %>%   bind_rows() %>%   t()  colnames(pevs_adm_alloc_summary_table) <- c(\"n_total\", \"r_total\", \"rr\",                                              \"deff_w\", \"eff_resp\")"},{"path":"https://jmendelson256.github.io/samplingNR/articles/samplingNR.html","id":"results","dir":"Articles","previous_headings":"Evaluate performance","what":"Results","title":"Sample allocation example: 2016 PEVS-ADM","text":"","code":"(pevs_adm_alloc_summary_tibble <-     tibble::as_tibble(pevs_adm_alloc_summary_table, rownames = \"alloc\")) #> # A tibble: 4 × 6 #>   alloc     n_total r_total     rr deff_w eff_resp #>   <chr>       <dbl>   <dbl>  <dbl>  <dbl>    <dbl> #> 1 n_h_Ninv    50000   6794. 0.136    2.37    2865. #> 2 n_h_Nresp   50000   2865. 0.0573   1       2865. #> 3 n_h_optA    50000   4494. 0.0899   1.26    3570. #> 4 n_h_optE    50000   4496. 0.0899   1.26    3570.  #View the percent increase in effective sample size from optE relative to Ninv  # and Nresp. eff_resp_vec <- pevs_adm_alloc_summary_tibble$eff_resp eff_resp_vec[4]/eff_resp_vec[1:2] - 1 #> [1] 0.2461351 0.2461351"},{"path":"https://jmendelson256.github.io/samplingNR/articles/samplingNR.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Sample allocation example: 2016 PEVS-ADM","text":"Federal Voting Assistance Program. (2017a). 2015-2016 Active Duty Military dataset. Federal Voting Assistance Program, U.S. Department Defense. Federal Voting Assistance Program (2017b). Post-Election Voting Surveys: Active Duty Military: Technical report 2016. Technical report, Federal Voting Assistance Program, U.S. Department Defense. Kish, L. (1992). Weighting unequal Pi. Journal Official Statistics, 8(2), 183–200.","code":""},{"path":"https://jmendelson256.github.io/samplingNR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jonathan Mendelson. Author, maintainer.","code":""},{"path":"https://jmendelson256.github.io/samplingNR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Mendelson J (2024). samplingNR: Stratified sample allocation anticipated nonresponse. R package version 0.2.2, https://jmendelson256.github.io/samplingNR/, https://github.com/jmendelson256/samplingNR.","code":"@Manual{,   title = {samplingNR: Stratified sample allocation under anticipated nonresponse},   author = {Jonathan Mendelson},   year = {2024},   note = {R package version 0.2.2, https://jmendelson256.github.io/samplingNR/},   url = {https://github.com/jmendelson256/samplingNR}, }"},{"path":"https://jmendelson256.github.io/samplingNR/index.html","id":"samplingnr","dir":"","previous_headings":"","what":"Stratified sample allocation under anticipated nonresponse","title":"Stratified sample allocation under anticipated nonresponse","text":"samplingNR R package allows computing optimal allocations anticipated nonresponse, described paper.","code":""},{"path":"https://jmendelson256.github.io/samplingNR/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Stratified sample allocation under anticipated nonresponse","text":"can install samplingNR using command :","code":"install.packages(\"samplingNR_0.2.2.tar.gz\")"},{"path":"https://jmendelson256.github.io/samplingNR/index.html","id":"vignette","dir":"","previous_headings":"","what":"Vignette","title":"Stratified sample allocation under anticipated nonresponse","text":"can learn use package vignette(\"samplingNR\"), shows replicate two tables paper application post-election survey military personnel.","code":""},{"path":"https://jmendelson256.github.io/samplingNR/index.html","id":"basic-usage","dir":"","previous_headings":"","what":"Basic usage","title":"Stratified sample allocation under anticipated nonresponse","text":"main allocation function opt_nh_nonresp(), provides exact version proposed optimal allocation anticipated nonresponse. current version assumes goal minimize (expected) variance subject constraint total (expected) costs invited sample size.","code":""},{"path":"https://jmendelson256.github.io/samplingNR/index.html","id":"fixed-total-sample-size","dir":"","previous_headings":"Basic usage","what":"Fixed total sample size","title":"Stratified sample allocation under anticipated nonresponse","text":"aim allocate fixed total (invited) sample size, basic usage : vectors N_h phibar_hdenote strata population sizes, anticipated response rates, (optionally) strata variances, respectively, scalar n_max denotes total sample size. S_h omitted, strata variances assumed constant across strata.","code":"opt_nh_nonresp(   N_h,   phibar_h,   S_h = NULL,   n_max   ... )"},{"path":"https://jmendelson256.github.io/samplingNR/index.html","id":"fixed-total-costs","dir":"","previous_headings":"Basic usage","what":"Fixed total costs","title":"Stratified sample allocation under anticipated nonresponse","text":"aim allocate sample subject constraint total costs, basic usage : , c_max denotes total allowable costs, c_NR_h denotes unit costs per nonrespondent (strata), tau_h denotes ratio unit costs per respondent nonrespondents (strata). arguments c_NR_h tau_h can specified vectors dimension H quantities vary strata; alternatively, assumed constant across strata, can specified scalars.","code":"opt_nh_nonresp(   N_h,   phibar_h,   S_h = NULL,   c_max,   c_NR_h,   tau_h   ... )"},{"path":"https://jmendelson256.github.io/samplingNR/reference/calc_moments_truncbinom.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute moments for truncated binomial distribution — calc_moments_truncbinom","title":"Compute moments for truncated binomial distribution — calc_moments_truncbinom","text":"random variable \\(X \\sim TBinom(n,p)\\), follows (zero)-truncated binomial distribution defined dtruncbinom() (.e., binomial distribution support zero removed), calc_moments_truncbinom() computes \\(\\textrm{E}(X)\\), \\(\\textrm{E}(X^2)\\), \\(\\textrm{Var}(X)\\), \\(\\textrm{E}(1/X)\\).","code":""},{"path":"https://jmendelson256.github.io/samplingNR/reference/calc_moments_truncbinom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute moments for truncated binomial distribution — calc_moments_truncbinom","text":"","code":"calc_moments_truncbinom(size, prob)"},{"path":"https://jmendelson256.github.io/samplingNR/reference/calc_moments_truncbinom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute moments for truncated binomial distribution — calc_moments_truncbinom","text":"size scalar number trials (n); must 1 prob scalar probability success trial (p); must nonzero","code":""},{"path":"https://jmendelson256.github.io/samplingNR/reference/calc_moments_truncbinom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute moments for truncated binomial distribution — calc_moments_truncbinom","text":"vector containing \\(\\textrm{E}(X)\\), \\(\\textrm{E}(X^2)\\), \\(\\textrm{Var}(X)\\), \\(\\textrm{E}(1/x)\\)","code":""},{"path":"https://jmendelson256.github.io/samplingNR/reference/calc_moments_truncbinom.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute moments for truncated binomial distribution — calc_moments_truncbinom","text":"Note moments computed directly using probability mass function since simple closed form \\(\\textrm{E}(1/x)\\). may lead slow computation extremely large numbers trials.","code":""},{"path":[]},{"path":"https://jmendelson256.github.io/samplingNR/reference/calc_moments_truncbinom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute moments for truncated binomial distribution — calc_moments_truncbinom","text":"","code":"calc_moments_truncbinom(30, .1) #>          E_X       E_X_sq          V_X E_one_over_X  #>     3.132803    12.217932     2.403477     0.428114  calc_moments_truncbinom(30, .2) #>          E_X       E_X_sq          V_X E_one_over_X  #>    6.0074368   40.8505706    4.7612731    0.1991115"},{"path":"https://jmendelson256.github.io/samplingNR/reference/calc_zeta.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute variance inflation factor from uncertainty in responding sample size\n(with smoothing for continuous \\(n_h\\)) — calc_zeta","title":"Compute variance inflation factor from uncertainty in responding sample size\n(with smoothing for continuous \\(n_h\\)) — calc_zeta","text":"Computes \\(\\zeta_h(n_h, \\bar{\\phi}_h):=\\mathrm{E}(r_h)\\mathrm{E}\\left(\\frac{1}{r_h}\\right)\\), defined paper. strata allocation may lead \\(\\mathrm{E}(r_h) < r_h^{LB}\\) user-specified \\(r_h^{LB}\\) (3.5 default), \\(\\zeta_h(.)\\) evaluated using \\(n_h':= max\\left(n_h, \\left\\lceil      \\frac{r_h^{LB}}{\\bar{\\phi}_h}\\right\\rceil\\right)\\) place \\(n_h\\). , \\(\\zeta_h(.)\\) computed continuous \\(n_h\\) weighted average evaluations \\(\\lfloor n_h \\rfloor\\) \\(\\lfloor n_h \\rfloor + 1\\), paper.","code":""},{"path":"https://jmendelson256.github.io/samplingNR/reference/calc_zeta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute variance inflation factor from uncertainty in responding sample size\n(with smoothing for continuous \\(n_h\\)) — calc_zeta","text":"","code":"calc_zeta(n_h, phibar_h, rh_min = 3.5, verbose_flag = FALSE)"},{"path":"https://jmendelson256.github.io/samplingNR/reference/calc_zeta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute variance inflation factor from uncertainty in responding sample size\n(with smoothing for continuous \\(n_h\\)) — calc_zeta","text":"n_h (vector) strata sample sizes nonresponse (\\(n_h\\)) phibar_h (vector) strata response propensities (\\(\\bar{\\phi}_h\\)) rh_min (scalar) minimum target respondents per stratum (\\(r_h^{LB}\\)); default 3.5 verbose_flag (bool) flag whether provide noisy results","code":""},{"path":"https://jmendelson256.github.io/samplingNR/reference/calc_zeta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute variance inflation factor from uncertainty in responding sample size\n(with smoothing for continuous \\(n_h\\)) — calc_zeta","text":"vector length \\(H\\) containing \\(\\left\\{\\zeta_h(n_h', \\bar{\\phi}_h):h=1,2,...,H\\right\\}\\), \\(n_h'\\) larger \\(n_h\\) \\(\\frac{r_h^{LB}}{\\bar{\\phi}_h}\\)","code":""},{"path":"https://jmendelson256.github.io/samplingNR/reference/calc_zeta.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute variance inflation factor from uncertainty in responding sample size\n(with smoothing for continuous \\(n_h\\)) — calc_zeta","text":"paper, assumed number respondents stratum \\(h\\) can modeled standard binomial support zero removed (.e., zero-truncated binomial; see dtruncbinom()), written \\(r_h \\sim TBinom(n_h, \\bar{\\phi}_h)\\), \\(n_h\\) number invitees stratum \\(h\\), \\(\\bar{\\phi}_h\\) average response propensity within stratum \\(h\\), unit-level response propensities assumed constant within strata. paper defines function \\(\\zeta_h(n_h, \\bar{\\phi}_h):=\\mathrm{E}(r_h)\\mathrm{E}\\left(\\frac{1}{r_h}\\right)\\). quantity variance inflation term captures effect variability number respondents given allocation (computing variance poststratified estimator nonresponse finite population mean). discrete \\(n_h\\), current function (calc_zeta()) computes \\(\\zeta_h(n_h', \\bar{\\phi}_h)\\), use \\(n_h':= max\\left(n_h, \\left\\lceil \\frac{r_h^{LB}}{\\bar{\\phi}_h}\\right\\rceil\\right)\\) avoid underallocating strata expected respondents, \\(r_h^{LB}\\) given lower bound number expected respondents. default, set \\(r_h^{LB} = 3.5\\), since truncated binomial distribution may sometimes poor approximation binomial distribution levels, observed numerically \\(\\zeta_h(n_h, \\bar{\\phi}_h)\\) roughly maximized various \\(\\bar{\\phi}_h\\) (fixed levels .01 1) \\(n_h \\approx \\frac{3.5}{\\bar{\\phi}_h}\\). continuous \\(n_h\\), define \\(\\zeta_h(n_h, \\bar{\\phi}_h)\\) weighted average evaluations \\(\\lfloor n_h \\rfloor\\) \\(\\lfloor n_h \\rfloor + 1\\), via $$\\zeta_h'(n_h,\\bar{\\phi}_h) =     w_h \\cdot \\zeta_h(\\lfloor n_h \\rfloor,\\bar{\\phi}_h) + \\left(1 - w_h\\right)\\cdot     \\zeta_h(\\lfloor n_h \\rfloor + 1,\\bar{\\phi}_h),$$ \\(w_h= \\left(\\lfloor n_h \\rfloor + 1\\right) - n_h\\).","code":""},{"path":"https://jmendelson256.github.io/samplingNR/reference/calc_zeta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute variance inflation factor from uncertainty in responding sample size\n(with smoothing for continuous \\(n_h\\)) — calc_zeta","text":"","code":"#Basic example #Note that n_h is adjusted in strata 1 and 4 since n_h * phibar_h < 3.5 calc_zeta(n_h = c(100, 200, 300, 300),          phibar_h = c(.03, .02, .05, .005)) #> [1] 1.351014 1.337523 1.073827 1.357905"},{"path":"https://jmendelson256.github.io/samplingNR/reference/calc_zeta_discrete.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute variance inflation factor from uncertainty in responding sample size\n(for integer \\(n_h\\)) — calc_zeta_discrete","title":"Compute variance inflation factor from uncertainty in responding sample size\n(for integer \\(n_h\\)) — calc_zeta_discrete","text":"Computes \\(\\zeta_h(n_h, \\bar{\\phi}_h):=\\mathrm{E}(r_h)\\mathrm{E}\\left(\\frac{1}{r_h}\\right)\\), defined paper. strata allocation may lead \\(\\mathrm{E}(r_h) < r_h^{LB}\\) user-specified \\(r_h^{LB}\\) (3.5 default), \\(\\zeta_h(.)\\) evaluated using \\(n_h':= max\\left(n_h, \\left\\lceil      \\frac{r_h^{LB}}{\\bar{\\phi}_h}\\right\\rceil\\right)\\) place \\(n_h\\). Continuous values \\(n_h\\) rounded (default).","code":""},{"path":"https://jmendelson256.github.io/samplingNR/reference/calc_zeta_discrete.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute variance inflation factor from uncertainty in responding sample size\n(for integer \\(n_h\\)) — calc_zeta_discrete","text":"","code":"calc_zeta_discrete(   n_h,   phibar_h,   rh_min = 3.5,   round_flag = TRUE,   verbose_flag = FALSE )"},{"path":"https://jmendelson256.github.io/samplingNR/reference/calc_zeta_discrete.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute variance inflation factor from uncertainty in responding sample size\n(for integer \\(n_h\\)) — calc_zeta_discrete","text":"n_h (vector) strata sample sizes nonresponse (\\(n_h\\)) phibar_h (vector) strata response propensities (\\(\\bar{\\phi}_h\\)) rh_min (scalar) minimum target respondents per stratum (\\(r_h^{LB}\\)); default 3.5 round_flag (bool) specifies whether round continuous allocations (versus throwing error) verbose_flag (bool) flag whether provide detailed results","code":""},{"path":"https://jmendelson256.github.io/samplingNR/reference/calc_zeta_discrete.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute variance inflation factor from uncertainty in responding sample size\n(for integer \\(n_h\\)) — calc_zeta_discrete","text":"vector length \\(H\\) containing \\(\\left\\{\\zeta_h(n_h', \\bar{\\phi}_h):h=1,2,...,H\\right\\}\\), \\(n_h'\\) larger \\(n_h\\) \\(\\frac{r_h^{LB}}{\\bar{\\phi}_h}\\)","code":""},{"path":"https://jmendelson256.github.io/samplingNR/reference/calc_zeta_discrete.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute variance inflation factor from uncertainty in responding sample size\n(for integer \\(n_h\\)) — calc_zeta_discrete","text":"paper, assumed number respondents stratum \\(h\\) can modeled standard binomial support zero removed (.e., zero-truncated binomial; see dtruncbinom()), written \\(r_h \\sim TBinom(n_h, \\bar{\\phi}_h)\\), \\(n_h\\) number invitees stratum \\(h\\), \\(\\bar{\\phi}_h\\) average response propensity within stratum \\(h\\), unit-level response propensities assumed constant within strata. paper defines function \\(\\zeta_h(n_h, \\bar{\\phi}_h):=\\mathrm{E}(r_h)\\mathrm{E}\\left(\\frac{1}{r_h}\\right)\\). quantity variance inflation term captures effect variability number respondents given allocation. current function (calc_zeta_discrete()) computes \\(\\zeta_h(n_h', \\bar{\\phi}_h)\\), use \\(n_h':= max\\left(n_h, \\left\\lceil \\frac{r_h^{LB}}{\\bar{\\phi}_h}\\right\\rceil\\right)\\) avoid underallocating strata expected respondents, \\(r_h^{LB}\\) given lower bound number expected respondents. default, set \\(r_h^{LB} = 3.5\\), since truncated binomial distribution may sometimes poor approximation binomial distribution levels, observed numerically \\(\\zeta_h(n_h, \\bar{\\phi}_h)\\) roughly maximized various \\(\\bar{\\phi}_h\\) (fixed levels .01 1) \\(n_h \\approx \\frac{3.5}{\\bar{\\phi}_h}\\). Function defined discrete \\(n_h\\); input round_flag controls whether \\(n_h\\) rounded nearest integer (opposed throwing error).","code":""},{"path":[]},{"path":"https://jmendelson256.github.io/samplingNR/reference/calc_zeta_discrete.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute variance inflation factor from uncertainty in responding sample size\n(for integer \\(n_h\\)) — calc_zeta_discrete","text":"","code":"if (FALSE) { #Basic example calc_zeta_discrete(n_h = c(100, 200, 300, 300),                   phibar_h = c(.03, .02, .05, .001))  #Verbose info shows that strata 1,5 have their sample sizes increased #   due to having fewer than 3.5 expected respondents calc_zeta_discrete(n_h = c(100, 200, 300, 300),                    phibar_h = c(.03, .02, .05, .001),                    verbose_flag = TRUE)  #Similar to above, but removes the minimum number of respondents, # which changes the values for strata 1 and 4. calc_zeta_discrete(n_h = c(100, 200, 300, 300),                   phibar_h = c(.03, .02, .05, .001),                   rh_min = 0,                   verbose_flag = TRUE) }"},{"path":"https://jmendelson256.github.io/samplingNR/reference/dtruncbinom.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate density of truncated binomial distribution — dtruncbinom","title":"Calculate density of truncated binomial distribution — dtruncbinom","text":"Calculates density binomial distribution support 0 removed, refer (zero-) truncated binomial distribution (e.g., Rider, 1955; Stephan, 1945).","code":""},{"path":"https://jmendelson256.github.io/samplingNR/reference/dtruncbinom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate density of truncated binomial distribution — dtruncbinom","text":"","code":"dtruncbinom(x, size, prob)"},{"path":"https://jmendelson256.github.io/samplingNR/reference/dtruncbinom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate density of truncated binomial distribution — dtruncbinom","text":"x vector values size (scalar) number trials (n); must 1 prob (scalar) probability success trial (p); must nonzero","code":""},{"path":"https://jmendelson256.github.io/samplingNR/reference/dtruncbinom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate density of truncated binomial distribution — dtruncbinom","text":"Vector densities associated provided values (x) given parameters","code":""},{"path":"https://jmendelson256.github.io/samplingNR/reference/dtruncbinom.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate density of truncated binomial distribution — dtruncbinom","text":"Let \\(X\\) denote random variable probability mass function (pmf) \\(\\mathrm{p}(k;n,p) = \\mathrm{Pr}(X = k; n, p) = \\frac{\\binom{n}{k} p^k (1-p)^{n-k}}{1 - (1-p)^n} \\propto \\binom{n}{k} p^k (1-p)^{n-k}\\), \\(k = 1, 2, ..., n\\), zero mass, otherwise. say \\(X\\) truncated binomial parameters \\((n,p)\\), written \\(X \\sim TBinom(n,p)\\), \\(n\\) refers number trials \\(p\\) refers probability success trial corresponding binomial distribution.","code":""},{"path":"https://jmendelson256.github.io/samplingNR/reference/dtruncbinom.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate density of truncated binomial distribution — dtruncbinom","text":"Rider, P. R. (1955). Truncated binomial negative binomial distributions. Journal American Statistical Association, 50(271), 877-883. Stephan, F. F. (1945). expected value variance reciprocal negative powers positive Bernoullian variate. Annals Mathematical Statistics, 16(1), 50-61.","code":""},{"path":[]},{"path":"https://jmendelson256.github.io/samplingNR/reference/dtruncbinom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate density of truncated binomial distribution — dtruncbinom","text":"","code":"dtruncbinom(1:20, 20, .2) #>  [1] 5.831844e-02 1.385063e-01 2.077594e-01 2.207444e-01 1.765955e-01 #>  [6] 1.103722e-01 5.518610e-02 2.241935e-02 7.473118e-03 2.055107e-03 #> [11] 4.670699e-04 8.757560e-05 1.347317e-05 1.684146e-06 1.684146e-07 #> [16] 1.315739e-08 7.739642e-10 3.224851e-11 8.486450e-13 1.060806e-14  #same as above dbinom(1:20, size = 20, prob = .2) / sum(dbinom(1:20, size = 20, prob = .2)) #>  [1] 5.831844e-02 1.385063e-01 2.077594e-01 2.207444e-01 1.765955e-01 #>  [6] 1.103722e-01 5.518610e-02 2.241935e-02 7.473118e-03 2.055107e-03 #> [11] 4.670699e-04 8.757560e-05 1.347317e-05 1.684146e-06 1.684146e-07 #> [16] 1.315739e-08 7.739642e-10 3.224851e-11 8.486450e-13 1.060806e-14"},{"path":"https://jmendelson256.github.io/samplingNR/reference/opt_nh_nonresp.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate optimal allocation under anticipated nonresponse — opt_nh_nonresp","title":"Calculate optimal allocation under anticipated nonresponse — opt_nh_nonresp","text":"Computes optimal stratified sampling allocation anticipated nonresponse, proposed paper, $$n_h \\propto \\frac{N_h S_h \\sqrt{\\zeta_h(n_h, \\bar{\\phi}_h)}}      {\\sqrt{\\bar{\\phi}_h c_h }},$$ \\(N_h\\) stratum \\(h\\) population size, \\(S_h\\) stratum \\(h\\) unit standard deviation, \\(\\bar{\\phi}_h\\) stratum \\(h\\) average response propensity, \\(\\zeta_h(.)\\) variance inflation term captures variability number respondents (see calc_zeta()), \\(c_h = \\textrm{E}(C_h) / n_h = c_{NR_h} \\left(\\bar{\\phi}_h (\\tau_h - 1) + 1\\right)\\) expected cost per invitee stratum \\(h\\). cost structure assumes respondents nonrespondents stratum \\(h\\) per-unit costs \\(c_{R_h}\\) \\(c_{NR_h}\\), respectively, ratio \\(\\tau_h = c_{R_h}/c_{NR_h}\\). opt_nh_nonresp() computes exact allocation iterative fashion (see Details section); individual iterations computed using opt_nh_nonresp_oneiter(), conditions given \\(\\zeta_h(.)\\). Users must specify either maximum total sample size (n_max) maximum total expected costs (c_max), . cost specification, users must also specify unit costs nonrespondents (c_NR_h) ratio unit costs respondents nonrespondents (tau_h). variables \\(h\\)-dimensional vectors, can supplied scalars equivalent across strata. Optionally, user can also specify unit population standard deviations, S_h, assumed constant across strata default. opt_nh_nonresp_oneiter() computes one iteration proposed allocation user-supplied \\(\\zeta_h(.)\\).","code":""},{"path":"https://jmendelson256.github.io/samplingNR/reference/opt_nh_nonresp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate optimal allocation under anticipated nonresponse — opt_nh_nonresp","text":"","code":"opt_nh_nonresp(   N_h,   phibar_h,   ...,   tol = 1e-08,   max_iter = 20,   verbose_flag = FALSE )  opt_nh_nonresp_oneiter(   N_h,   phibar_h,   S_h = NULL,   n_max = NULL,   c_max = NULL,   zeta_h = NULL,   c_NR_h = NULL,   tau_h = NULL,   strict_flag = TRUE,   verbose_flag = FALSE )"},{"path":"https://jmendelson256.github.io/samplingNR/reference/opt_nh_nonresp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate optimal allocation under anticipated nonresponse — opt_nh_nonresp","text":"N_h (vector) strata population counts (\\(N_h\\)) phibar_h (vector) strata response propensities (\\(\\bar{\\phi}_h\\)) ... Arguments passed opt_nh_nonresp_oneiter   tol (scalar) tolerance (stopping) max_iter (scalar) maximum number iterations (>=2) verbose_flag (boolean) whether provide detailed results S_h (vector) strata population standard deviations (\\(S_h\\)); constant, default n_max (scalar) total sample allocate c_max (scalar) max expected costs allocate zeta_h (vector; use opt_nh_nonresp_oneiter, ; optional) adjustment factor reflect inflation variances randomness number respondents (default = 1) c_NR_h (vector; use c_max) per-unit costs nonrespondents stratum h (\\(c_{NR_h}\\)) tau_h (vector; use c_max) ratio costs respondents costs nonrespondents stratum h (\\(\\tau_h\\)) strict_flag (boolean) whether throw error (versus warning) \\(n_h > N_h\\)","code":""},{"path":"https://jmendelson256.github.io/samplingNR/reference/opt_nh_nonresp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate optimal allocation under anticipated nonresponse — opt_nh_nonresp","text":"opt_nh_nonresp() returns sample allocation vector n_h following attributes: num_iter (scalar) number iterations used; zeta_h_prev (vector) final values zeta_h used (.e., 2nd--last iteration); max_nh_delta (scalar) biggest change stratum allocation previous round. opt_nh_nonresp_oneiter returns sample allocation vector n_h, computed single iteration given user-supplied zeta_h.","code":""},{"path":"https://jmendelson256.github.io/samplingNR/reference/opt_nh_nonresp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate optimal allocation under anticipated nonresponse — opt_nh_nonresp","text":"opt_nh_nonresp() computes optimal allocation iteratively, follows: Iteration \\(k=1\\) calculates \\(n_h^1\\), assumption \\(\\zeta_h(n_h, \\bar{\\phi}_h)=1\\). subsequent iteration \\(k\\), \\(k = 2, 3, ...,\\) following: Compute \\(\\zeta_h(n_h^{k-1}, \\bar{\\phi}_h)\\) via calc_zeta(). Compute \\(n_h^k\\) assumption \\(\\zeta_h(n_h, \\bar{\\phi}_h) =    \\zeta_h(n_h^{k-1}, \\bar{\\phi}_h)\\). Accept solution largest component \\(n_h^k - n_h^{k-1}\\) magnitude tolerance (tol) maximum number iterations (max_iter) reached. Otherwise, continue.","code":""},{"path":"https://jmendelson256.github.io/samplingNR/reference/opt_nh_nonresp.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Calculate optimal allocation under anticipated nonresponse — opt_nh_nonresp","text":"opt_nh_nonresp(): computes exact (.e., iterative) version proposed allocation. opt_nh_nonresp_oneiter(): computes single iteration proposed allocation user-supplied zeta_h (used place \\(\\zeta_h(.)\\) term).","code":""},{"path":"https://jmendelson256.github.io/samplingNR/reference/opt_nh_nonresp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate optimal allocation under anticipated nonresponse — opt_nh_nonresp","text":"","code":"#Compute exact optimum allocation for PEVS-ADM 2016 data set for n = 50k #Assumes tau = 1 by default pevs_optE_alloc_50k <- opt_nh_nonresp(N_h = pevs_adm_2016_rrs$Nhat_h,                                       phibar_h = pevs_adm_2016_rrs$rr_h,                                       n_max = 50000)  #Merge results into data frame (pevs_adm_alloc_50k_merged <- pevs_adm_2016_rrs %>%   dplyr::mutate(n_h_optE = c(pevs_optE_alloc_50k),                 zeta_h_optE = attr(pevs_optE_alloc_50k,\"zeta_h_prev\"))) #> # A tibble: 91 × 10 #>    h     service paygrade age   region  sex   Nhat_h   rr_h n_h_optE zeta_h_optE #>    <chr> <fct>   <fct>    <fct> <fct>   <fct>  <dbl>  <dbl>    <dbl>       <dbl> #>  1 1     Army    E1-E5    18-24 US      M     1.09e5 0.0189    8267.        1.01 #>  2 2     Army    E1-E5    18-24 US      F     1.89e4 0.0364    1041.        1.03 #>  3 3     Army    E1-E5    18-24 Overse… M     1.85e4 0.0214    1333.        1.04 #>  4 4     Army    E1-E5    18-24 Overse… F     3.31e3 0.0431     179.        1.17 #>  5 5     Army    E1-E5    25-29 US      M     4.83e4 0.0487    2280.        1.01 #>  6 6     Army    E1-E5    25-29 US      F     8.68e3 0.0619     370.        1.05 #>  7 7     Army    E1-E5    25-29 Overse… M/F   1.08e4 0.0566     477.        1.04 #>  8 8     Army    E1-E5    30-34 US      M/F   2.14e4 0.0891     746.        1.01 #>  9 9     Army    E1-E5    30-34 Overse… M/F   3.74e3 0.0904     135.        1.09 #> 10 10    Army    E1-E5    35+   US      M/F   9.06e3 0.188      219.        1.02 #> # ℹ 81 more rows    #For comparison purposes, compute approximate version of proposed allocation pevs_optA_alloc_50k <- opt_nh_nonresp_oneiter(N_h = pevs_adm_2016_rrs$Nhat_h,                                               phibar_h = pevs_adm_2016_rrs$rr_h,                                               n_max = 50000)  #Merge results to previous tibble and reorder columns to be adjacent pevs_adm_alloc_50k_merged %>%   dplyr::mutate(n_h_optA = c(pevs_optA_alloc_50k)) %>%   dplyr::relocate(zeta_h_optE, .after = \"n_h_optA\") #> # A tibble: 91 × 11 #>    h     service paygrade age   region   sex    Nhat_h   rr_h n_h_optE n_h_optA #>    <chr> <fct>   <fct>    <fct> <fct>    <fct>   <dbl>  <dbl>    <dbl>    <dbl> #>  1 1     Army    E1-E5    18-24 US       M     109214. 0.0189    8267.    8309. #>  2 2     Army    E1-E5    18-24 US       F      18921. 0.0364    1041.    1036. #>  3 3     Army    E1-E5    18-24 Overseas M      18465. 0.0214    1333.    1320. #>  4 4     Army    E1-E5    18-24 Overseas F       3312. 0.0431     179.     167. #>  5 5     Army    E1-E5    25-29 US       M      48348. 0.0487    2280.    2289. #>  6 6     Army    E1-E5    25-29 US       F       8680  0.0619     370.     364. #>  7 7     Army    E1-E5    25-29 Overseas M/F    10762. 0.0566     477.     473. #>  8 8     Army    E1-E5    30-34 US       M/F    21352. 0.0891     746.     747. #>  9 9     Army    E1-E5    30-34 Overseas M/F     3739. 0.0904     135.     130. #> 10 10    Army    E1-E5    35+   US       M/F     9055. 0.188      219.     218. #> # ℹ 81 more rows #> # ℹ 1 more variable: zeta_h_optE <dbl>"},{"path":"https://jmendelson256.github.io/samplingNR/reference/pevs_adm_2016_rrs.html","id":null,"dir":"Reference","previous_headings":"","what":"PEVS-ADM 2016 response rates by poststrata — pevs_adm_2016_rrs","title":"PEVS-ADM 2016 response rates by poststrata — pevs_adm_2016_rrs","text":"Population response rate information Federal Voting Assistance Program's 2016 Post-Election Voting Survey U.S. Active Duty Military, based secondary analysis public use data.","code":""},{"path":"https://jmendelson256.github.io/samplingNR/reference/pevs_adm_2016_rrs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PEVS-ADM 2016 response rates by poststrata — pevs_adm_2016_rrs","text":"","code":"pevs_adm_2016_rrs"},{"path":"https://jmendelson256.github.io/samplingNR/reference/pevs_adm_2016_rrs.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"PEVS-ADM 2016 response rates by poststrata — pevs_adm_2016_rrs","text":"Tibble containing 91 observations 8 variables. Includes: h (chr) Poststrata service (fct) Military service paygrade (fct) Pay grade category age (fct) Age category region (fct) Region sex (chr) Sex Nhat_h (dbl) Estimated population size poststratum h rr_h (dbl) Base-weighted empirical response propensity poststratum h","code":""},{"path":"https://jmendelson256.github.io/samplingNR/reference/pevs_adm_2016_rrs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"PEVS-ADM 2016 response rates by poststrata — pevs_adm_2016_rrs","text":"table paper's secondary analysis survey data FVAP's 2016 Post-Election Voting Survey U.S. Active Duty Military (PEVS-ADM; FVAP, 2017a). sampling frame reflects U.S. Active Duty Military, July 2016, based administrative data U.S. Defense Manpower Data Center (DMDC); see FVAP's technical report (2017b) details. analysis exclusively examines control group FVAP's response rate experiment (\\(n = 77{,}333\\)); omit \\(1{,}785\\) sample members identified ineligible via administative data prior survey fielding; units July 2016 sampling frame, identified via September 2016 personnel records longer active duty (e.g., due separations retirements). Population sizes estimated survey's base weights remaining cases. Poststratum response propensities base-weighted proportions invitees provided eligible, complete response survey; denominator includes invited units (opposed excluding ineligibles, AAPOR response rates), resulting sample allocation calculations reflect effects sample loss costs data collection. Note different choice denominator much impact estimated response rates, considering estimated 99.3% invited population meets study's screener-based eligibility criteria.","code":""},{"path":"https://jmendelson256.github.io/samplingNR/reference/pevs_adm_2016_rrs.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"PEVS-ADM 2016 response rates by poststrata — pevs_adm_2016_rrs","text":"Federal Voting Assistance Program. (2017a). 2015-2016 Active Duty Military dataset. Federal Voting Assistance Program, U.S. Department Defense. Federal Voting Assistance Program (2017b). Post-Election Voting Surveys: Active Duty Military: Technical report 2016. Technical report, Federal Voting Assistance Program, U.S. Department Defense.","code":""},{"path":"https://jmendelson256.github.io/samplingNR/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://jmendelson256.github.io/samplingNR/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://jmendelson256.github.io/samplingNR/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://jmendelson256.github.io/samplingNR/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://jmendelson256.github.io/samplingNR/reference/samplingNR.html","id":null,"dir":"Reference","previous_headings":"","what":"samplingNR: A package for stratified sample allocation under anticipated nonresponse — samplingNR","title":"samplingNR: A package for stratified sample allocation under anticipated nonresponse — samplingNR","text":"Package contains functions used computing stratified sample allocations manner accounts anticipated effects nonresponse sample efficiency.","code":""},{"path":"https://jmendelson256.github.io/samplingNR/reference/samplingNR.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"samplingNR: A package for stratified sample allocation under anticipated nonresponse — samplingNR","text":"get started, try running vignette(\"samplingNR\") view help page opt_nh_nonresp().","code":""},{"path":[]},{"path":"https://jmendelson256.github.io/samplingNR/reference/samplingNR.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"samplingNR: A package for stratified sample allocation under anticipated nonresponse — samplingNR","text":"Maintainer: Jonathan Mendelson jmendelson@gmail.com (ORCID)","code":""},{"path":"https://jmendelson256.github.io/samplingNR/news/index.html","id":"samplingnr-022","dir":"Changelog","previous_headings":"","what":"samplingNR 0.2.2","title":"samplingNR 0.2.2","text":"Use cc0 licensing opt_nh_nonresp, moved … optional args First intended public release","code":""},{"path":"https://jmendelson256.github.io/samplingNR/news/index.html","id":"samplingnr-021","dir":"Changelog","previous_headings":"","what":"samplingNR 0.2.1","title":"samplingNR 0.2.1","text":"Numerous documentation edits","code":""},{"path":"https://jmendelson256.github.io/samplingNR/news/index.html","id":"samplingnr-020","dir":"Changelog","previous_headings":"","what":"samplingNR 0.2.0","title":"samplingNR 0.2.0","text":"Ported core functionality development version (jmpaper3_0.1.0.9016.tar.gz) Renamed functions, cleaned documentation examples, added unit tests Added pevs_adm_2016_rrs data set","code":""}]
